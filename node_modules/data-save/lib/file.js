'use strict';
var version = require('../package.json').version;
var conf = require('./config');
var meta = require('./meta');
var fs = require('fs');
var path = require('path');
var appDir = path.dirname(require.main.filename);
var _file;
var cache;

var setFile = function(file) {
  if(file) {
    _file = appDir + '/.ds.' + file + '.json';
  } else {
    _file = appDir + conf.dsFile;
  }

  try {
    cache = fs.readFileSync(_file);
  } catch(e) {
    fs.writeFileSync(_file, JSON.stringify({}, null, 2));
  }
  if (cache) {
    try {
      cache = JSON.parse(cache);
    } catch(e) {}
  } else {
    cache = {};
  }
};

setFile();

var File = {
  version: version,
  type: 'File',
  save: function(callback) {
    fs.writeFileSync(_file, JSON.stringify(cache, null, 2));
  },
  setFile: function(file) {
    if(file) {
      setFile(file);
    }
  },
  get: function(key, file) {
    this.setFile(file);
    var keyMeta = meta.checkKeyMeta(this, key);
    if (keyMeta) {
      return default_value;
    }
    return cache[key];
  },
  getAndRemove: function(key, file) {
    this.setFile(file);
    var value = cache[key];
    delete cache[key];
    this.save();
    return value;
  },
  getList: function(file) {
    this.setFile(file);
    var list = [];
    for (var key in cache) {
      var obj = {};
      obj[key] = cache[key];
      list.push(obj);
    }
    return list;
  },
  set: function(key, value, file, config) {
    this.setFile(file);
    cache[key] = value;
    meta.setKeyMeta(this, key, config);
    this.save();
    return cache[key];
  },
  setItem: function(key, value, config) {
    return this.set(key, value, config);
  },
  remove: function(key, file) {
    this.setFile(file);
    try {
      delete cache[key];
    } catch(e) {}
    this.save();
  },
  clear: function(file) {
    this.setFile(file);
    cache = {};
    this.save();
  },
  list: function(file) {
    this.setFile(file);
    for (var key in cache) {
      console.log(key, '=', cache[key]);
    }
  }
};
module.exports = File;
